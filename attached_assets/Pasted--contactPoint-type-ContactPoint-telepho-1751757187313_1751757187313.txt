      ],
      "contactPoint": [
        {
          "@type": "ContactPoint",
          "telephone": "+53-58-78-1416",
          "contactType": "sales",
          "availableLanguage": ["Spanish", "German", "English"]
        },
        {
          "@type": "ContactPoint",
          "telephone": "+49-160-323-9439",
          "contactType": "technical support",
          "availableLanguage": ["German", "English"]
        },
        {
          "@type": "ContactPoint",
          "telephone": "+53-5473-1490",
          "contactType": "customer service",
          "availableLanguage": ["Spanish"]
        }
      ],
      "hasOfferCatalog": {
        "@type": "OfferCatalog",
        "name": "Productos Solares y Generadores",
        "itemListElement": [
          {
            "@type": "Offer",
            "itemOffered": {
              "@type": "Product",
              "name": "Sistemas Solares Completos",
              "description": "Sistemas solares completos de 1KW a 20KW con garantía internacional"
            }
          },
          {
            "@type": "Offer",
            "itemOffered": {
              "@type": "Product",
              "name": "Paneles Solares",
              "description": "Paneles monocristalinos y policristalinos de 300W a 550W"
            }
          },
          {
            "@type": "Offer",
            "itemOffered": {
              "@type": "Product",
              "name": "Generadores",
              "description": "Generadores diesel y gasolina silenciosos de 2KVA a 10KVA"
            }
          }
        ]
      }
    }
    </script>
    <script type="module" crossorigin src="/assets/index-_NFTae5s.js"></script>
    <link rel="stylesheet" crossorigin href="/assets/index-BnNToIff.css">
  </head>
  <body>
    <div id="root"></div>
    <!-- This is a replit script which adds a banner on the top of the page when opened in development mode outside the replit environment -->
    <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script>
  </body>
</html>
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# head -50 server/routes.ts | grep -A 20 "SIMPLE LOGIN"
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# cat > fix-login.js << 'EOF'
const fs = require('fs');
// Lese die routes.ts Datei
let content = fs.readFileSync('server/routes.ts', 'utf8');
// Füge den Working Login Endpunkt hinzu
const loginCode = `
  // WORKING LOGIN ENDPOINT
  app.post("/api/admin/login", async (req, res) => {
    try {
      const { username, password } = req.body;
      const bcrypt = require("bcryptjs");
      const { Pool } = require("pg");
      const pool = new Pool({ connectionString: process.env.DATABASE_URL });

      const client = await pool.connect();
      const result = await client.query("SELECT * FROM admin_users WHERE username = $1", [username]);

      if (result.rows.length > 0 && result.rows[0].is_active) {
        const isValid = await bcrypt.compare(password, result.rows[0].password);
        if (isValid) {
          const user = result.rows[0];
          client.release();
          return res.json({
            success: true,
            user: {
              id: user.id,
              username: user.username,
              email: user.email
            }
EOFsole.log('✅ Login endpoint fixed!');tent);\n  ');[\s\S]*?(?=app\.post\("\/api\/admin\/logout")/m,
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# node fix-login.js
file:///var/www/excalibur-cuba/ExcaliburGenerator/fix-login.js:1
const fs = require('fs');
           ^

ReferenceError: require is not defined in ES module scope, you can use import instead
This file is being treated as an ES module because it has a '.js' file extension and '/var/www/excalibur-cuba/ExcaliburGenerator/package.json' contains "type": "module". To treat it as a CommonJS script, rename it to use the '.cjs' file extension.
    at file:///var/www/excalibur-cuba/ExcaliburGenerator/fix-login.js:1:12
    at ModuleJob.run (node:internal/modules/esm/module_job:263:25)
    at async ModuleLoader.import (node:internal/modules/esm/loader:540:24)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)

Node.js v20.19.3
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# systemctl restart excalibur-cuba
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# curl -k -X POST https://31.97.77.135/api/admin/login \
  -H "Content-Type: application/json" \
  -d '{"username":"excalibur_admin","password":"admin123"}'
{"error":"Login failed"}root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# grep -n -A 15 'app.post.*login' servergrep -n -A 15 'app.post.*login' server/routes.ts
109:  app.post("/api/simple/login", async (req, res) => {
110-    try {
111-      const { username, password } = req.body;
112-      const bcrypt = require("bcryptjs");
113-      const { Pool } = require("pg");
114-      const pool = new Pool({ connectionString: process.env.DATABASE_URL });
115-
116-      const client = await pool.connect();
117-      const result = await client.query("SELECT * FROM admin_users WHERE username = $1", [username]);
118-
119-      if (result.rows.length > 0 && result.rows[0].is_active) {
120-        const isValid = await bcrypt.compare(password, result.rows[0].password);
121-        if (isValid) {
122-          client.release();
123-          return res.json({ success: true, redirect: "/admin" });
124-        }
--
144:  app.post("/api/admin/login", async (req, res) => {
145-    try {
146-      const { username, password } = req.body;
147-
148-      if (!username || !password) {
149-        return res.status(400).json({ error: "Username and password required" });
150-      }
151-
152-      const user = await loginUser(req, username, password);
153-      if (user) {
154-        const { password: _, ...userWithoutPassword } = user;
155-        res.json({ success: true, user: userWithoutPassword });
156-      } else {
157-        res.status(401).json({ error: "Invalid credentials" });
158-      }
159-    } catch (error) {
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# grep -n -A 15 'app.post.*login' server/routes.ts
109:  app.post("/api/simple/login", async (req, res) => {
110-    try {
111-      const { username, password } = req.body;
112-      const bcrypt = require("bcryptjs");
113-      const { Pool } = require("pg");
114-      const pool = new Pool({ connectionString: process.env.DATABASE_URL });
115-
116-      const client = await pool.connect();
117-      const result = await client.query("SELECT * FROM admin_users WHERE username = $1", [username]);
118-
119-      if (result.rows.length > 0 && result.rows[0].is_active) {
120-        const isValid = await bcrypt.compare(password, result.rows[0].password);
121-        if (isValid) {
122-          client.release();
123-          return res.json({ success: true, redirect: "/admin" });
124-        }
--
144:  app.post("/api/admin/login", async (req, res) => {
145-    try {
146-      const { username, password } = req.body;
147-
148-      if (!username || !password) {
149-        return res.status(400).json({ error: "Username and password required" });
150-      }
151-
152-      const user = await loginUser(req, username, password);
153-      if (user) {
154-        const { password: _, ...userWithoutPassword } = user;
155-        res.json({ success: true, user: userWithoutPassword });
156-      } else {
157-        res.status(401).json({ error: "Invalid credentials" });
158-      }
159-    } catch (error) {
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# cp server/routes.ts server/routes.ts.backup
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# cat > temp_login_fix.txt << 'EOF'
  // Authentication routes - WORKING VERSION
  app.post("/api/admin/login", async (req, res) => {
    try {
      const { username, password } = req.body;
      console.log("Login attempt for:", username);

      if (!username || !password) {
        return res.status(400).json({ error: "Username and password required" });
      }
      // Direct database login without sessions
      const bcrypt = require("bcryptjs");
      const { Pool } = require("pg");
      const pool = new Pool({ connectionString: process.env.DATABASE_URL });

      const client = await pool.connect();
      const result = await client.query("SELECT * FROM admin_users WHERE username = $1", [username]);

      if (result.rows.length > 0) {
        const user = result.rows[0];
        if (user.is_active) {
          const isValid = await bcrypt.compare(password, user.password);
          if (isValid) {
            console.log("Login successful for:", username);
            client.release();
            return res.json({
              success: true,
              user: {
                id: user.id,
EOF); res.status(500).json({ error: "Login failed" });ls" });
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# sed -i '/\/\/ Authentication routes/,/app\.post.*logout/ {
  /\/\/ Authentication routes/r temp_login_fix.txt
  /\/\/ Authentication routes/,/^  });$/d
}' server/routes.ts
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# rm temp_login_fix.txt
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# systemctl restart excalibur-cuba
root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator# curl -k -X POST https://31.97.77.135/api/admin/login \
  -H "Content-Type: application/json" \
  -d '{"username":"excalibur_admin","password":"admin123"}'
{"error":"Login failed"}root@srv896300:/var/www/excalibur-cuba/ExcaliburGenerator#